@page "{handler?}"
@model mywebapp.Pages.DashboardModel
@{
    ViewData["Title"] = "Question Dashboard";
}

<div class="container-fluid vh-100 p-0">
    <div class="row vh-100 g-0">
        <!-- Question Section -->
        <div class="col-md-3">
            <div class="card h-100">
                <div class="card-header bg-primary text-white">
                    <h6 class="mb-0">Question</h6>
                </div>
                <div class="card-body">
                    @if (!string.IsNullOrEmpty(Model.ErrorMessage))
                    {
                        <div class="alert alert-danger">@Model.ErrorMessage</div>
                    }
                    @if (Model.CurrentQuestion != null)
                    {
                        <h5 class="card-title">@Model.CurrentQuestion.Title</h5>
                        <div class="question-scroll">
                            <pre class="question-description">@Model.CurrentQuestion.Description</pre>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Editor Section -->
        <div class="col-md-6 vh-100">
            <div class="card h-100">
                <div class="card-header bg-dark text-white">
                    <h6 class="mb-0">Code Editor</h6>
                </div>
                <div class="card-body p-0">
                    <form method="post" id="codeForm" onsubmit="return false;">
                        <input type="hidden" asp-for="StudentId" />
                        <input type="hidden" asp-for="Group" />
                        <input type="hidden" asp-for="Question" />
                        <div id="editor" style="height: calc(100vh - 90px);">
                            <textarea asp-for="SubmittedCode" style="display: none;"></textarea>
                        </div>
                        <div class="p-2 d-flex gap-2">
                            <button type="button" class="btn btn-primary" id="runCode">Run Code</button>
                            <button type="button" class="btn btn-success" id="submitBtn">Submit</butto>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <!-- Output Section -->
        <div class="col-md-3 vh-100">
            <div class="card vh-100">
                <div class="card-header bg-secondary text-white">
                    <h6 class="mb-0">Output</h6>
                </div>
                <div class="card-body">
                    <pre id="output" class="output-area"></pre>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Add Modal -->
<div class="modal fade" id="confirmSubmitModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Submission</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to submit your code? 
                <br>This action cannot be undone.
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-success" id="confirmSubmit">Yes, Submit</button>
            </div>
        </div>
    </div>
</div>

<style>
    html, body {
        height: 100%;
        margin: 0;
        padding: 0;
        overflow: hidden;
    }

    .container-fluid {
        height: 100vh;
    }

    .row {
        height: 100vh;
    }

    .card {
        height: 100vh;
        margin: 0;
        border-radius: 0;
        border: none;
    }

    #editor {
        height: calc(100vh - 110px);
    }

    .question-scroll {
        height: calc(100vh - 130px);
        overflow-y: auto;
    }

    .output-area {
        height: calc(100vh - 130px);
        overflow-y: auto;
    }

    .question-description {
        white-space: pre-wrap;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        font-size: 0.7rem;
        line-height: 1.5;
        background: none;
        border: none;
        margin: 0;
        padding: 0;
    }

    /* Remove card margins and add borders */
    .card {
        margin: 0;
        border-radius: 0;
    }

    .card-header {
        padding: 0.5rem 1rem;
        border-radius: 0;
    }

    /* Make sections equal height */
    .row {
        height: calc(100vh - 100px);
    }

    .gap-2 {
        gap: 0.5rem;
    }

    .btn:disabled {
        cursor: not-allowed;
        opacity: 0.65;
    }

    .spinner-border-sm {
        width: 1rem;
        height: 1rem;
        margin-right: 0.5rem;
    }
</style>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.36.1/min/vs/loader.min.js"></script>
    <script>
        require.config({ paths: { 'vs': 'https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.36.1/min/vs' }});
        require(['vs/editor/editor.main'], function() {
            var editor = monaco.editor.create(document.getElementById('editor'), {
                value: @Json.Serialize(Model.CurrentQuestion?.InitialCode ?? "// Write your code here"),
                language: 'csharp',
                theme: 'vs-dark',
                automaticLayout: true,
                fontSize: 10,
                lineHeight: 18,
                minimap: {
                    enabled: false
                }
            });

            // Update hidden textarea before form submission
            document.querySelector('form').addEventListener('submit', function() {
                document.querySelector('textarea[name="SubmittedCode"]').value = editor.getValue();
            });

            const form = document.getElementById('codeForm');
            const submitBtn = document.getElementById('submitBtn');
            const confirmSubmitBtn = document.getElementById('confirmSubmit');
            const modal = new bootstrap.Modal(document.getElementById('confirmSubmitModal'));

            submitBtn.addEventListener('click', function() {
                document.querySelector('textarea[name="SubmittedCode"]').value = editor.getValue();
                modal.show();
            });

            confirmSubmitBtn.addEventListener('click', async function() {
                modal.hide();
                const formData = new FormData(form);
                const studentId = formData.get('StudentId');
                const group = formData.get('Group');
                const question = formData.get('Question');
                const code = formData.get('SubmittedCode');

                try {
                    const response = await fetch('/api/Questions/submit', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            studentId: studentId,
                            groupId: parseInt(group),
                            questionIndex: parseInt(question),
                            code: code
                        })
                    });

                    if (response.ok) {
                        const result = await response.json();
                        if (result.isCompleted) {
                            // If completed, redirect to completion page
                            window.location.href = `/Completion?studentId=${studentId}&groupId=${result.nextGroup}&done=true`;
                        } else {
                            // Otherwise, continue to next question
                            window.location.href = `/Dashboard?group=${result.nextGroup}&question=${result.nextQuestion}&studentId=${studentId}`;
                        }
                    } else {
                        const error = await response.json();
                        document.getElementById('output').textContent = `Error: ${error.message || 'Failed to submit code'}`;
                    }
                } catch (error) {
                    document.getElementById('output').textContent = `Error: ${error.message}`;
                }
            });

            // Keep Run Code functionality for testing
            const runButton = document.getElementById('runCode');
            runButton.addEventListener('click', async function() {
                const outputElement = document.getElementById('output');
                
                // Disable button and show running state
                runButton.disabled = true;
                runButton.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Running...';
                outputElement.textContent = 'Running...';
                
                // Clear previous decorations
                decorations = editor.deltaDecorations(decorations, []);
                
                try {
                    const response = await fetch('/api/CodeExecution/execute', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ code: editor.getValue() })
                    });

                    const result = await response.json();
                    
                    if (response.ok) {
                        outputElement.textContent = result.output;
                    } else if (result.errors && result.errors.length > 0) {
                        // Create error markers for Monaco editor
                        const markers = result.errors.map(err => ({
                            startLineNumber: err.line,
                            startColumn: err.column,
                            endLineNumber: err.line,
                            endColumn: err.column + 1,
                            message: `${err.severity} ${err.errorCode}: ${err.message}`,
                            severity: err.severity === 'error' ? 
                                monaco.MarkerSeverity.Error : 
                                monaco.MarkerSeverity.Warning
                        }));

                        // Set markers on the model
                        monaco.editor.setModelMarkers(
                            editor.getModel(), 
                            'compilation',
                            markers
                        );

                        // Add error decorations
                        decorations = editor.deltaDecorations([], markers.map(marker => ({
                            range: new monaco.Range(
                                marker.startLineNumber,
                                marker.startColumn,
                                marker.endLineNumber,
                                marker.endColumn
                            ),
                            options: {
                                className: 'squiggly-error',
                                hoverMessage: { value: marker.message }
                            }
                        })));

                        // Show errors in output
                        const errorMessages = result.errors
                            .map(err => `${err.severity} ${err.errorCode}: ${err.message} (Line ${err.line}, Column ${err.column})`)
                            .join('\n');
                        outputElement.textContent = errorMessages;

                        if (result.rawError && !errorMessages) {
                            outputElement.textContent = result.rawError;
                        }
                    } else {
                        outputElement.textContent = `Compilation failed with exit code ${result.exitCode}`;
                        if (result.rawError) {
                            outputElement.textContent += `\n\n${result.rawError}`;
                        }
                    }
                } catch (error) {
                    outputElement.textContent = 'Error: ' + error.message;
                } finally {
                    // Re-enable button and restore original text
                    runButton.disabled = false;
                    runButton.textContent = 'Run Code';
                }
            });

            let lastSavedContent = '';

            function autoSave() {
                const editor = monaco.editor.getEditors()[0];
                const currentContent = editor.getValue();
                const statusElement = document.getElementById('autoSaveStatus');

                // Only save if content has changed
                if (currentContent && currentContent !== lastSavedContent) {
                    const studentId = document.querySelector('input[name="StudentId"]').value;
                    const group = document.querySelector('input[name="Group"]').value;
                    const question = document.querySelector('input[name="Question"]').value;

                    fetch(`/api/Questions/autosave/${studentId}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            groupId: parseInt(group),
                            questionIndex: parseInt(question),
                            code: currentContent
                        })
                    })
                    .then(response => response.json())
                    .then(result => {
                        if (result.success) {
                            lastSavedContent = currentContent;
                            console.log('Auto-saved at:', new Date().toLocaleTimeString());
                        }
                    })
                    .catch(error => {
                        console.error('Auto-save failed:', error);
                    });
                }
            }

            // Start auto-save interval when editor is loaded
            setInterval(autoSave, 60000); // Run every 60 seconds

            // Also save when user switches away from the window
            window.addEventListener('blur', autoSave);
        });
    </script>
}
