@page "{handler?}"
@model mywebapp.Pages.DashboardModel
@{
    ViewData["Title"] = "Question Dashboard";
}

<div class="exam-content">
<div class="container-fluid vh-100 p-0">
    <div class="row vh-100 g-0">
        <!-- Question Section -->
        <div class="col-md-3">
            <div class="card h-100">
                <div class="card-header bg-primary text-white">
                    <h6 class="mb-0">Question</h6>
                </div>
                <div class="card-body">
                    @if (!string.IsNullOrEmpty(Model.ErrorMessage))
                    {
                        <div class="alert alert-danger">@Model.ErrorMessage</div>
                    }
                    @if (Model.CurrentQuestion != null)
                    {
                        <h5 class="card-title">@Model.CurrentQuestion.Title</h5>
                        <div class="question-scroll">
                            <pre class="question-description">@Model.CurrentQuestion.Description</pre>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Editor Section -->
        <div class="col-md-6 vh-100">
            <div class="card h-100">
                <div class="card-header bg-dark text-white">
                    <h6 class="mb-0">Code Editor</h6>
                </div>
                <div class="card-body p-0">
                    <form method="post" id="codeForm" onsubmit="return false;">
                        <input type="hidden" asp-for="StudentId" />
                        <input type="hidden" asp-for="Group" />
                        <input type="hidden" asp-for="Question" />
                        <div id="editor" style="height: calc(100vh - 90px);">
                            <textarea asp-for="SubmittedCode" style="display: none;"></textarea>
                        </div>
                        <div class="p-2 d-flex gap-2 justify-content-between align-items-center">
    <div class="d-flex gap-2">
        <button type="button" class="btn btn-primary" id="runCode">Run Code</button>
        <button type="button" class="btn btn-success" id="submitBtn">Submit</button>
    </div>
    <div class="time-info">
    @if (Model.StartTime.HasValue)
    {
        <span class="time-elapsed" id="timeDisplay">Time: @Math.Round(Model.TimeElapsed * 60) sec</span>
    }
</div>
</div>
                    </form>
                </div>
            </div>
        </div>

        <!-- Output Section -->
        <div class="col-md-3 vh-100">
            <div class="card vh-100">
                <div class="card-header bg-secondary text-white">
                    <h6 class="mb-0">Output</h6>
                </div>
                <div class="card-body p-0">
                    <pre id="output" class="output-area"></pre>
                </div>
            </div>
        </div>
    </div>
</div>
</div>
<!-- Add Modal -->
<div class="modal fade" id="confirmSubmitModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Submission</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to submit your code? 
                <br>This action cannot be undone.
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-success" id="confirmSubmit">Yes, Submit</button>
                
            </div>
        </div>
    </div>
</div>

<!-- Fullscreen Modal -->
<div class="modal fade" id="fullscreenModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Fullscreen Required</h5>
            </div>
            <div class="modal-body">
                <p>This exam requires fullscreen mode. The exam will start once you enter fullscreen mode.</p>
                <p>Please note:</p>
                <ul>
                    <li>Exiting fullscreen will trigger a warning</li>
                    <li>Multiple attempts to exit may result in exam termination</li>
                    <li>Please ensure all other applications are closed</li>
                </ul>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" id="enterFullscreenBtn">Enter Fullscreen</button>
            </div>
        </div>
    </div>
</div>

<style>
    html, body {
        height: 100%;
        margin: 0;
        padding: 0;
        overflow: hidden;
    }

    .container-fluid {
        height: 100vh;
    }

    .row {
        height: 100vh;
    }

    .card {
        height: 100vh;
        margin: 0;
        border-radius: 0;
        border: none;
    }

    #editor {
        height: calc(100vh - 110px);
    }

    .question-scroll {
        height: calc(100vh - 130px);
        overflow-y: auto;
    }

/* Update existing output styles */
.output-area {
    min-height: 200px;
    overflow-y: auto;
    font-family: Consolas, monospace;
    font-size: 14px;
    line-height: 1.4;
    white-space: pre-wrap;
    word-wrap: break-word;
}

.output-area pre {
    margin: 0;
    padding: 0;
    overflow-x: auto;
    white-space: pre-wrap;
    word-wrap: break-word;
}

    /* Remove these color classes if they exist */
    .output-area .text-success,
    .output-area .text-danger,
    .output-area .text-warning {
        color: inherit;
    }

    .output-area pre {
        margin: 0;
        padding: 0;
    }

    .question-description {
        white-space: pre-wrap;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        font-size: 0.7rem;
        line-height: 1.5;
        background: none;
        border: none;
        margin: 0;
        padding: 0;
    }

    /* Remove card margins and add borders */
    .card {
        margin: 0;
        border-radius: 0;
    }

    .card-header {
        padding: 0.5rem 1rem;
        border-radius: 0;
    }

    /* Make sections equal height */
    .row {
        height: calc(100vh - 100px);
    }

    .gap-2 {
        gap: 0.5rem;
    }

    .btn:disabled {
        cursor: not-allowed;
        opacity: 0.65;
    }

    .spinner-border-sm {
        width: 1rem;
        height: 1rem;
        margin-right: 0.5rem;
    }

    .time-info {
        padding: 0.5rem 1rem;
        background-color: #f8f9fa;
        border-radius: 0.375rem;
        margin-top: 0.5rem;
    }

    .time-elapsed {
        font-weight: 500;
        color: #333;
    }

    .squiggly-error {
        background: url("data:image/svg+xml,%3Csvg%20xmlns%3D'http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg'%20viewBox%3D'0%200%206%203'%20enable-background%3D'new%200%200%206%203'%20height%3D'3'%20width%3D'6'%3E%3Cg%20fill%3D'%23ff0000'%3E%3Cpolygon%20points%3D'5.5%2C0%202.5%2C3%201.1%2C3%204.1%2C0'%2F%3E%3Cpolygon%20points%3D'4%2C0%206%2C2%206%2C0.6%205.4%2C0'%2F%3E%3Cpolygon%20points%3D'0%2C2%201%2C3%202.4%2C3%200%2C0.6'%2F%3E%3C%2Fg%3E%3C%2Fsvg%3E") repeat-x bottom 3px left 0;
    }
    /* Add fullscreen content hiding */
    .exam-content {
        display: none;
        visibility: hidden;
        opacity: 0;
        transition: opacity 0.3s ease-in-out;
    }
    
    /* Show content in fullscreen */
    :fullscreen .exam-content {
        display: block;
        visibility: visible;
        opacity: 1;
    }
    
    :-webkit-full-screen .exam-content {
        display: block;
        visibility: visible;
        opacity: 1;
    }
    
    :-moz-full-screen .exam-content {
        display: block;
        visibility: visible;
        opacity: 1;
    }
    
    :-ms-fullscreen .exam-content {
        display: block;
        visibility: visible;
        opacity: 1;
    }
    
    /* Add fullscreen warning */
    .fullscreen-warning {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        text-align: center;
        background: white;
        padding: 2rem;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        z-index: 1050;
    }

    :fullscreen .fullscreen-warning {
        display: none;
    }

    /* Add these rules to your existing <style> section */
.card-title,
.question-scroll,
.question-description {
    user-select: none;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    pointer-events: none;
}

/* Keep scrolling enabled for question container */
.question-scroll {
    pointer-events: auto;
    cursor: default;
}
 .auto-blur {
        filter: blur(10px);
        transition: filter 0.3s ease;
    }
    .no-blur {
        filter: none;
    }
/* Ensure output area remains selectable */
.output-area {
    user-select: text;
    -webkit-user-select: text;
    -moz-user-select: text;
    -ms-user-select: text;
}
</style>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.36.1/min/vs/loader.min.js"></script>
    <script src="https://pdfanticopy.com/noprint.js"></script>
    <script>
            var noPrint = true;
    var noCopy = true;
    var noScreenshot = true;
    var autoBlur = true;
        require.config({ paths: { 'vs': 'https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.36.1/min/vs' }});
        require(['vs/editor/editor.main'], function() {
            // Add this line to declare the decorations variable
            let decorations = [];
            
            var editor = monaco.editor.create(document.getElementById('editor'), {
                value: @Json.Serialize(Model.CurrentQuestion?.InitialCode ?? "// Write your code here"),
                language: 'csharp',
                theme: 'vs-dark',
                automaticLayout: true,
                fontSize: 10,
                lineHeight: 18,
                minimap: {
                    enabled: false
                }
            });
            // Replace the existing contextmenu event listener with this enhanced version
document.addEventListener('contextmenu', function(e) {
    e.preventDefault();
    return false;
});

// Add this after editor initialization
editor.onContextMenu(function(e) {
    e.preventDefault();
    e.stopPropagation();
    return false;
});

// Prevent mouse down events for right click
editor.onMouseDown(function(e) {
    if (e.event.button === 2) { // Right button
        e.event.preventDefault();
        e.event.stopPropagation();
        return false;
    }
});
if (autoBlur) {
            const examContent = document.querySelector('.exam-content');
            
            window.addEventListener('blur', () => {
                examContent.classList.add('auto-blur');
            });

            window.addEventListener('focus', () => {
                examContent.classList.remove('auto-blur');
            });
        }

        // Enhance existing protection
        document.addEventListener('keyup', e => {
            if (e.key === 'PrintScreen') {
                navigator.clipboard.writeText('');
            }
        });
// Disable the default context menu actions
editor.addCommand(monaco.KeyMod.CtrlCmd | monaco.KeyCode.KeyM, () => {
    // Do nothing - this prevents the context menu keyboard shortcut
    return false;
});

// Update editor options to disable quick suggestions and parameter hints
editor.updateOptions({
    contextmenu: false,
    quickSuggestions: false,
    parameterHints: {
        enabled: false
    },
    hover: {
        enabled: false
    }
});
            // Update hidden textarea before form submission
            document.querySelector('form').addEventListener('submit', function() {
                document.querySelector('textarea[name="SubmittedCode"]').value = editor.getValue();
            });

            const form = document.getElementById('codeForm');
            const submitBtn = document.getElementById('submitBtn');
            const confirmSubmitBtn = document.getElementById('confirmSubmit');
            const modal = new bootstrap.Modal(document.getElementById('confirmSubmitModal'));

            submitBtn.addEventListener('click', function() {
                document.querySelector('textarea[name="SubmittedCode"]').value = editor.getValue();
                modal.show();
            });

            async function getUserIp() {
        try {
            const response = await fetch('https://ipinfo.io/json?token=8841c2af2bcc80');
            const data = await response.json();
            //console.log("🌐 IP Info fetched:", data.ip);
            return data.ip;
        } catch (error) {
            console.error('Failed to get IP:', error);
            return 'unknown';
        }
    }
            confirmSubmitBtn.addEventListener('click', async function() {
                modal.hide();
                const formData = new FormData(form);
                const studentId = formData.get('StudentId');
                const group = formData.get('Group');
                const question = formData.get('Question');
                const code = formData.get('SubmittedCode');
                const userIp = await getUserIp();

                try {
                    const response = await fetch('/api/Questions/submit', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            studentId: studentId,
                            groupId: parseInt(group),
                            questionIndex: parseInt(question),
                            code: code,
                            ipAddress: userIp
                        })
                    });

                    if (response.ok) {
                        const result = await response.json();
                        if (result.isCompleted) {
                            // If completed, redirect to completion page
                            window.location.href = `/Completion?studentId=${studentId}&groupId=${result.nextGroup}&done=true`;
                        } else {
                            // Otherwise, continue to next question
                            window.location.href = `/Dashboard?group=${result.nextGroup}&question=${result.nextQuestion}&studentId=${studentId}`;
                        }
                    } else {
                        const error = await response.json();
                        document.getElementById('output').textContent = `Error: ${error.message || 'Failed to submit code'}`;
                    }
                } catch (error) {
                    document.getElementById('output').textContent = `Error: ${error.message}`;
                }
            });

            // Update the run code functionality
            const runButton = document.getElementById('runCode');
            runButton.addEventListener('click', async function() {
                const outputElement = document.getElementById('output');
                
                // Disable button and show running state
                runButton.disabled = true;
                runButton.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Running...';
                outputElement.textContent = 'Running...';
                
                // Clear previous decorations
                decorations = editor.deltaDecorations(decorations, []);
                
                try {
                    const response = await fetch('/api/CodeExecution/execute', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ 
                            code: editor.getValue() 
                        })
                    });


                    const result = await response.json();
                    
                    
                    if (response.ok && result.Output) {
                        // Simple plain text output without coloring
                        outputElement.innerHTML = `<pre>${result.Output}</pre>`;
                    } else if (result.errors && result.errors.length > 0) {
                        // Keep error handling as is
                        const markers = result.errors.map(err => ({
                            startLineNumber: err.line || 1,
                            startColumn: err.column || 1,
                            endLineNumber: err.line || 1,
                            endColumn: (err.column || 1) + 1,
                            message: err.message || 'Unknown error',
                            severity: monaco.MarkerSeverity.Error
                        }));

                        // Set markers on the model
                        monaco.editor.setModelMarkers(
                            editor.getModel(), 
                            'compilation',
                            markers
                        );

                        // Show errors in output
                        outputElement.innerHTML = result.errors
                            .map(err => `Error (${err.line}:${err.column}): ${err.message}`)
                            .join('\n');
                    } else if (result.error) {
                        // Handle runtime errors with formatting
                        outputElement.innerHTML = `<span class="text-danger">Runtime Error: ${result.error.type}\n${result.error.message}\nLine: ${result.error.line}</span>`;
                    } else {
                        // Handle unexpected response
                        outputElement.innerHTML = '<span class="text-warning">No output received from code execution</span>';
                    }
                } catch (error) {
                    // Handle execution errors
                    outputElement.innerHTML = `<span class="text-danger">Error: ${error.message}</span>`;
                } finally {
                    // Re-enable button and restore original text
                    runButton.disabled = false;
                    runButton.textContent = 'Run Code';
                }
            });

            let lastSavedContent = '';

            async function autoSave() {
                const editor = monaco.editor.getEditors()[0];
                const currentContent = editor.getValue();
                
                if (currentContent && currentContent !== lastSavedContent) {
                    const studentId = document.querySelector('input[name="StudentId"]').value;
                    const group = document.querySelector('input[name="Group"]').value;
                    const question = document.querySelector('input[name="Question"]').value;
                    const userIp = await getUserIp();

                    fetch(`/api/Questions/autosave/${studentId}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            groupId: parseInt(group),
                            questionIndex: parseInt(question),
                            code: currentContent,
                            ipAddress: userIp
                        })
                    })
                    .then(response => response.json())
                    .then(result => {
                        if (result.success) {
                            lastSavedContent = currentContent;
                            console.log('Auto-saved at:', new Date().toLocaleTimeString(), 'from IP:', userIp);
                        }
                    })
                    .catch(error => console.error('Auto-save failed:', error));
                }
            }

            // Start auto-save interval when editor is loaded
            setInterval(autoSave, 60000); // Run every 60 seconds

            // Also save when user switches away from the window
            window.addEventListener('blur', autoSave);

            // Initialize timer variables
const TOTAL_TIME = 60 * 60; // 60 minutes in seconds * 60
const startTime = new Date(@Json.Serialize(Model.StartTime));
const initialElapsed = @Json.Serialize(Model.TimeElapsed * 60); // Convert minutes to seconds
let remainingSeconds = TOTAL_TIME - Math.round(initialElapsed);
const timeDisplay = document.getElementById('timeDisplay');

// Format time function
function formatTime(seconds) {
    const minutes = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `Time Left: ${minutes}:${secs.toString().padStart(2, '0')}`;
}

// Update timer every second
const timer = setInterval(async () => {
    if (remainingSeconds > 0) {
        remainingSeconds--;
        if (timeDisplay) {
            timeDisplay.textContent = formatTime(remainingSeconds);
            if (remainingSeconds < 300) {
                timeDisplay.style.color = '#dc3545';
                timeDisplay.style.fontWeight = 'bold';
            }
        }
    } else {
        clearInterval(timer);
        if (timeDisplay) {
            timeDisplay.textContent = 'Time Up!';
            timeDisplay.style.color = '#dc3545';
            
            const studentId = document.querySelector('input[name="StudentId"]').value;
            const group = document.querySelector('input[name="Group"]').value;
            const userIp = await getUserIp();
            
            try {
                await fetch('/api/Questions/submit', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        studentId: studentId,
                        groupId: parseInt(group),
                        questionIndex: parseInt(question),
                        code: editor.getValue(),
                        ipAddress: userIp
                    })
                });
            } finally {
                window.location.href = `/Completion?studentId=${studentId}&groupId=${group}&done=true`;
            }
        }
    }
}, 1000);

// Clean up timer when leaving the page
window.addEventListener('beforeunload', () => {
    clearInterval(timer);
});

// Add this inside your existing Scripts section after editor initialization
function enterFullscreen() {
    const elem = document.documentElement;
    if (elem.requestFullscreen) {
        elem.requestFullscreen();
    } else if (elem.webkitRequestFullscreen) {
        elem.webkitRequestFullscreen();
    } else if (elem.msRequestFullscreen) {
        elem.msRequestFullscreen();
    }
}

// Handle fullscreen changes
document.addEventListener('fullscreenchange', handleFullscreenChange);
document.addEventListener('webkitfullscreenchange', handleFullscreenChange);
document.addEventListener('mozfullscreenchange', handleFullscreenChange);
document.addEventListener('MSFullscreenChange', handleFullscreenChange);

function handleFullscreenChange() {
    if (!document.fullscreenElement && !document.webkitFullscreenElement &&
        !document.mozFullscreenElement && !document.msFullscreenElement) {
        // Fullscreen was exited - reenter if exam is ongoing
        if (remainingSeconds > 0) {
            enterFullscreen();
        }
    }
}

// Prevent key combinations that could exit fullscreen
document.addEventListener('keydown', function(e) {
    // Prevent Alt+Tab
    if (e.altKey && e.key === 'Tab') {
        e.preventDefault();
        return false;
    }
    
    // Prevent Alt+F4
    if (e.altKey && e.key === 'F4') {
        e.preventDefault();
        return false;
    }
    
    // Prevent Escape key
    if (e.key === 'Escape' || e.key === 'Esc') {
        e.preventDefault();
        return false;
    }
});

// Prevent right-click context menu
document.addEventListener('contextmenu', function(e) {
    e.preventDefault();
    return false;
});

// Show fullscreen modal on page load
const fullscreenModal = new bootstrap.Modal(document.getElementById('fullscreenModal'), {
    backdrop: 'static',
    keyboard: false,
    focus: true
});
fullscreenModal.show();

// Enter fullscreen when button is clicked
document.getElementById('enterFullscreenBtn').addEventListener('click', function() {
    this.blur(); // Remove focus before hiding modal
    fullscreenModal.hide();
    enterFullscreen();
});

// Add focus management
document.getElementById('fullscreenModal').addEventListener('shown.bs.modal', function() {
    document.getElementById('enterFullscreenBtn').focus();
});

// Add this after editor initialization in the Scripts section
// Prevent pasting in the entire document except editor
document.addEventListener('paste', function(e) {
    const target = e.target;
    // Allow paste only in Monaco editor
    if (!target.closest('#editor')) {
        e.preventDefault();
        alert('Pasting is not allowed during the exam');
        return false;
    }
});

// Add paste detection to Monaco editor
editor.onDidPaste((e) => {
    console.log('Paste detected in editor');
    @* const studentId = document.querySelector('input[name="StudentId"]').value;
    fetch('/api/Questions/logPaste', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            studentId: studentId,
            pastedContent: e.text,
            timestamp: new Date().toISOString()
        })
    }).catch(error => console.error('Failed to log paste:', error)); *@
});

// Optional: Add warning for paste attempts
editor.addCommand(monaco.KeyMod.CtrlCmd | monaco.KeyCode.KeyV, () => {
    const doPaste = confirm('Warning: Pasting code during the exam is not allowed');
    if (doPaste) {
        editor.trigger('keyboard', 'paste', null);
    }
});
        });
        let screenshotAttempts = 0;
const MAX_SCREENSHOT_ATTEMPTS = 3;

// Add protection overlay
document.body.insertAdjacentHTML('beforeend', `
    <div id="screenshot-protection" style="display:none; position:fixed; top:0; left:0; width:100%; height:100vh; 
        background:#fff; z-index:99999; text-align:center; padding-top:40vh;">
        <h2 style="color:#dc3545">Screenshot Attempt Detected</h2>
        <p>Screenshots are not allowed during the exam.</p>
        <button onclick="hideProtection()" class="btn btn-primary mt-3">Resume Exam</button>
    </div>
`);

// Screenshot detection function
function handleScreenshotAttempt() {
    screenshotAttempts++;
    const protection = document.getElementById('screenshot-protection');
    const counter = document.getElementById('attempt-counter');
    protection.style.display = 'block';
    counter.textContent = screenshotAttempts;

}

function hideProtection() {
    document.getElementById('screenshot-protection').style.display = 'none';
}

// Detect various screenshot methods
document.addEventListener('keydown', function(e) {
     if (e.ctrlKey && e.shiftKey) {
        console.log('Ctrl+Shift+S detected');
        e.preventDefault();
        handleScreenshotAttempt();
        return false;
    }
    if (
        e.key === 'PrintScreen' ||
        (e.ctrlKey && (e.key === 'p' || e.key === 'P')) ||
        (e.metaKey && (e.key === 'p' || e.key === 'P')) ||
        (e.shiftKey && (e.key === '3' || e.key === '4')) || // Mac screenshots
        (e.ctrlKey && e.shiftKey && (e.key === 'I' || e.key === 'i')) // Added Ctrl+Shift+S
    ) {
        e.preventDefault();
        handleScreenshotAttempt();
        return false;
    }
});
const style = document.createElement('style');
style.textContent = `
    @@media print {
        body * {
            display: none !important;
        }
        body:after {
            content: "Printing is not allowed during the exam";
            display: block !important;
        }
    }

    #screenshot-protection {
        background: linear-gradient(135deg, #ffffff 0%, #f5f5f5 100%);
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    }

    video::-webkit-media-controls-enclosure,
    video::-webkit-media-controls {
        display: none !important;
    }
`;
const contentProtection = {
    init() {
        // Add protective overlay
        this.addProtectiveLayer();
        // Add event listeners
        this.addProtectionEvents();
    },

    addProtectiveLayer() {
        const style = document.createElement('style');
        style.textContent = `
            /* Prevent text selection */
            .exam-content {
                -webkit-user-select: none;
                -moz-user-select: none;
                -ms-user-select: none;
                user-select: none;
            }

            /* Prevent drag and drop */
            .exam-content * {
                -webkit-user-drag: none;
                -khtml-user-drag: none;
                -moz-user-drag: none;
                -o-user-drag: none;
                user-drag: none;
            }

            /* Prevent copy */
            .exam-content {
                -webkit-touch-callout: none;
            }

            /* Disable pointer events on images */
            .exam-content img {
                pointer-events: none;
            }

            /* Print prevention */
            @@media print {
                body { display: none; }
            }
        `;
        document.head.appendChild(style);
    },

    addProtectionEvents() {
        // Prevent copy/cut
        document.addEventListener('copy', e => {
            if (!e.target.closest('#editor')) {
                e.preventDefault();
            }
        });
        
        document.addEventListener('cut', e => {
            if (!e.target.closest('#editor')) {
                e.preventDefault();
            }
        });

        // Prevent save page
        document.addEventListener('keydown', e => {
            if ((e.ctrlKey || e.metaKey) && e.key === 's') {
                e.preventDefault();
            }
        });

        // Prevent view source
        document.addEventListener('keydown', e => {
            if ((e.ctrlKey || e.metaKey) && e.key === 'u') {
                e.preventDefault();
            }
        });

        // Disable developer tools shortcuts
        document.addEventListener('keydown', e => {
            if ((e.ctrlKey || e.metaKey) && e.shiftKey && 
                (e.key === 'i' || e.key === 'j' || e.key === 'c')) {
                e.preventDefault();
            }
        });
    }
};
document.addEventListener("visibilitychange", () => {
  if (document.visibilityState === "hidden") {
    console.log("User possibly switched away — screenshot?");
  }
});

// Initialize protection
contentProtection.init();
document.head.appendChild(style);
    </script>
}
