@page
@model mywebapp.Pages.DashboardModel
@{
    ViewData["Title"] = "Question Dashboard";
}

<div class="container-fluid vh-100 p-0">
    <div class="row vh-100 g-0">
        <!-- Question Section -->
        <div class="col-md-3">
            <div class="card h-100">
                <div class="card-header bg-primary text-white">
                    <h6 class="mb-0">Question</h6>
                </div>
                <div class="card-body">
                    @if (!string.IsNullOrEmpty(Model.ErrorMessage))
                    {
                        <div class="alert alert-danger">@Model.ErrorMessage</div>
                    }
                    @if (Model.CurrentQuestion != null)
                    {
                        <h5 class="card-title">@Model.CurrentQuestion.Title</h5>
                        <div class="question-scroll">
                            <pre class="question-description">@Model.CurrentQuestion.Description</pre>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Editor Section -->
        <div class="col-md-6 vh-100">
            <div class="card h-100">
                <div class="card-header bg-dark text-white">
                    <h6 class="mb-0">Code Editor</h6>
                </div>
                <div class="card-body p-0">
                    <div id="editor" style="height: calc(100vh - 90px);"></div>
                    <div class="p-2 d-flex gap-2">
                        <button class="btn btn-primary" id="runCode">Run Code</button>
                        <button class="btn btn-success" id="submitCode">Submit</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Output Section -->
        <div class="col-md-3 vh-100">
            <div class="card vh-100">
                <div class="card-header bg-secondary text-white">
                    <h6 class="mb-0">Output</h6>
                </div>
                <div class="card-body">
                    <pre id="output" class="output-area"></pre>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    html, body {
        height: 100%;
        margin: 0;
        padding: 0;
        overflow: hidden;
    }

    .container-fluid {
        height: 100vh;
    }

    .row {
        height: 100vh;
    }

    .card {
        height: 100vh;
        margin: 0;
        border-radius: 0;
        border: none;
    }

    #editor {
        height: calc(100vh - 110px);
    }

    .question-scroll {
        height: calc(100vh - 130px);
        overflow-y: auto;
    }

    .output-area {
        height: calc(100vh - 130px);
        overflow-y: auto;
    }

    .question-description {
        white-space: pre-wrap;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        font-size: 0.7rem;
        line-height: 1.5;
        background: none;
        border: none;
        margin: 0;
        padding: 0;
    }

    /* Remove card margins and add borders */
    .card {
        margin: 0;
        border-radius: 0;
    }

    .card-header {
        padding: 0.5rem 1rem;
        border-radius: 0;
    }

    /* Make sections equal height */
    .row {
        height: calc(100vh - 100px);
    }

    .gap-2 {
        gap: 0.5rem;
    }

    .btn:disabled {
        cursor: not-allowed;
        opacity: 0.65;
    }

    .spinner-border-sm {
        width: 1rem;
        height: 1rem;
        margin-right: 0.5rem;
    }
</style>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.36.1/min/vs/loader.min.js"></script>
    <script>
        let currentQuestionIndex = @Model.Question;
        const studentId = '@Model.StudentId';

        require.config({ paths: { 'vs': 'https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.36.1/min/vs' }});
        require(['vs/editor/editor.main'], function() {
            var editor = monaco.editor.create(document.getElementById('editor'), {
                value: [
                    '// Write your code here',
                    'using System;',
                    '',
                    'class Program {',
                    '    static void Main() {',
                    '        // Your solution here',
                    '    }',
                    '}'
                ].join('\n'),
                language: 'csharp',
                theme: 'vs-dark',
                automaticLayout: true,
                fontSize: 10, // Add this line for smaller text
                lineHeight: 18, // Add this line for compact line height
                minimap: {
                    enabled: false // Optional: disable minimap for more space
                }
            });

            editor.setValue(@Json.Serialize(Model.CurrentQuestion?.InitialCode));

            async function loadQuestion(index) {
                try {
                    const response = await fetch(`/api/Questions/groups/@Model.Group/questions/${index}?studentId=${studentId}`);
                    
                    if (response.ok) {
                        const question = await response.json();
                        document.querySelector('.card-title').textContent = question.title;
                        document.querySelector('.question-description').textContent = question.description;
                        editor.setValue(question.initialCode || '');
                        
                        // Update URL without reloading
                        const url = new URL(window.location);
                        url.searchParams.set('group', '@Model.Group');
                        url.searchParams.set('question', index.toString());
                        url.searchParams.set('studentId', studentId);
                        window.history.pushState({}, '', url);
                        
                        currentQuestionIndex = index;
                    }
                } catch (error) {
                    console.error('Error:', error);
                }
            }

            const runButton = document.getElementById('runCode');
            const submitButton = document.getElementById('submitCode');
            
            runButton.addEventListener('click', async function() {
                const outputElement = document.getElementById('output');
                
                // Disable button and show running state
                runButton.disabled = true;
                runButton.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Running...';
                outputElement.textContent = 'Running...';
                
                // Clear previous decorations
                decorations = editor.deltaDecorations(decorations, []);
                
                try {
                    const response = await fetch('/api/CodeExecution/execute', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ code: editor.getValue() })
                    });

                    const result = await response.json();
                    
                    if (response.ok) {
                        outputElement.textContent = result.output;
                    } else if (result.errors && result.errors.length > 0) {
                        // Create error markers for Monaco editor
                        const markers = result.errors.map(err => ({
                            startLineNumber: err.line,
                            startColumn: err.column,
                            endLineNumber: err.line,
                            endColumn: err.column + 1,
                            message: `${err.severity} ${err.errorCode}: ${err.message}`,
                            severity: err.severity === 'error' ? 
                                monaco.MarkerSeverity.Error : 
                                monaco.MarkerSeverity.Warning
                        }));

                        // Set markers on the model
                        monaco.editor.setModelMarkers(
                            editor.getModel(), 
                            'compilation',
                            markers
                        );

                        // Add error decorations
                        decorations = editor.deltaDecorations([], markers.map(marker => ({
                            range: new monaco.Range(
                                marker.startLineNumber,
                                marker.startColumn,
                                marker.endLineNumber,
                                marker.endColumn
                            ),
                            options: {
                                className: 'squiggly-error',
                                hoverMessage: { value: marker.message }
                            }
                        })));

                        // Show errors in output
                        const errorMessages = result.errors
                            .map(err => `${err.severity} ${err.errorCode}: ${err.message} (Line ${err.line}, Column ${err.column})`)
                            .join('\n');
                        outputElement.textContent = errorMessages;

                        if (result.rawError && !errorMessages) {
                            outputElement.textContent = result.rawError;
                        }
                    } else {
                        outputElement.textContent = `Compilation failed with exit code ${result.exitCode}`;
                        if (result.rawError) {
                            outputElement.textContent += `\n\n${result.rawError}`;
                        }
                    }
                } catch (error) {
                    outputElement.textContent = 'Error: ' + error.message;
                } finally {
                    // Re-enable button and restore original text
                    runButton.disabled = false;
                    runButton.textContent = 'Run Code';
                }
            });

            submitButton.addEventListener('click', async function() {
                if (!confirm('Are you sure you want to submit your solution?')) {
                    return;
                }

                const outputElement = document.getElementById('output');
                submitButton.disabled = true;
                submitButton.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Submitting...';
                
                try {
                    // Store the current submission in sessionStorage
                    sessionStorage.setItem(`submission_${currentQuestionIndex}`, editor.getValue());
                    
                    const response = await fetch('/api/Questions/submit', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            groupId: 1,
                            questionIndex: currentQuestionIndex,
                            code: editor.getValue()
                        })
                    });
                    
                    if (response.ok) {
                        const result = await response.json();
                        outputElement.textContent = 'Submission successful: ' + result.message;
                        
                        // Load next question after successful submission
                        setTimeout(async () => {
                            await loadQuestion(currentQuestionIndex + 1);
                        }, 1500);
                    } else {
                        outputElement.textContent = 'Submission failed: ' + response.statusText;
                    }
                } catch (error) {
                    outputElement.textContent = 'Error submitting code: ' + error.message;
                } finally {
                    submitButton.disabled = false;
                    submitButton.textContent = 'Submit';
                }
            });

            // Load initial question
            document.addEventListener('DOMContentLoaded', () => {
                loadQuestion(currentQuestionIndex);
            });
        });
    </script>
}