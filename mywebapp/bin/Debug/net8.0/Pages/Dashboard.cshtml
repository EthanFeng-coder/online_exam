@page "{handler?}"
@model mywebapp.Pages.DashboardModel
@{
    ViewData["Title"] = "Question Dashboard";
}

<div class="container-fluid vh-100 p-0">
    <div class="row vh-100 g-0">
        <!-- Question Section -->
        <div class="col-md-3">
            <div class="card h-100">
                <div class="card-header bg-primary text-white">
                    <h6 class="mb-0">Question</h6>
                </div>
                <div class="card-body">
                    @if (!string.IsNullOrEmpty(Model.ErrorMessage))
                    {
                        <div class="alert alert-danger">@Model.ErrorMessage</div>
                    }
                    @if (Model.CurrentQuestion != null)
                    {
                        <h5 class="card-title">@Model.CurrentQuestion.Title</h5>
                        <div class="question-scroll">
                            <pre class="question-description">@Model.CurrentQuestion.Description</pre>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Editor Section -->
        <div class="col-md-6 vh-100">
            <div class="card h-100">
                <div class="card-header bg-dark text-white">
                    <h6 class="mb-0">Code Editor</h6>
                </div>
                <div class="card-body p-0">
                    <form method="post" id="codeForm" onsubmit="return false;">
                        <input type="hidden" asp-for="StudentId" />
                        <input type="hidden" asp-for="Group" />
                        <input type="hidden" asp-for="Question" />
                        <div id="editor" style="height: calc(100vh - 90px);">
                            <textarea asp-for="SubmittedCode" style="display: none;"></textarea>
                        </div>
                        <div class="p-2 d-flex gap-2 justify-content-between align-items-center">
    <div class="d-flex gap-2">
        <button type="button" class="btn btn-primary" id="runCode">Run Code</button>
        <button type="button" class="btn btn-success" id="submitBtn">Submit</button>
    </div>
    <div class="time-info">
    @if (Model.StartTime.HasValue)
    {
        <span class="time-elapsed" id="timeDisplay">Time: @Math.Round(Model.TimeElapsed * 60) sec</span>
    }
</div>
</div>
                    </form>
                </div>
            </div>
        </div>

        <!-- Output Section -->
        <div class="col-md-3 vh-100">
            <div class="card vh-100">
                <div class="card-header bg-secondary text-white">
                    <h6 class="mb-0">Output</h6>
                </div>
                <div class="card-body p-0">
                    <pre id="output" class="output-area"></pre>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Add Modal -->
<div class="modal fade" id="confirmSubmitModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Submission</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to submit your code? 
                <br>This action cannot be undone.
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-success" id="confirmSubmit">Yes, Submit</button>
                
            </div>
        </div>
    </div>
</div>

<style>
    html, body {
        height: 100%;
        margin: 0;
        padding: 0;
        overflow: hidden;
    }

    .container-fluid {
        height: 100vh;
    }

    .row {
        height: 100vh;
    }

    .card {
        height: 100vh;
        margin: 0;
        border-radius: 0;
        border: none;
    }

    #editor {
        height: calc(100vh - 110px);
    }

    .question-scroll {
        height: calc(100vh - 130px);
        overflow-y: auto;
    }

/* Update existing output styles */
.output-area {
    min-height: 200px;
    overflow-y: auto;
    font-family: Consolas, monospace;
    font-size: 14px;
    line-height: 1.4;
    white-space: pre-wrap;
    word-wrap: break-word;
}

.output-area pre {
    margin: 0;
    padding: 0;
    overflow-x: auto;
    white-space: pre-wrap;
    word-wrap: break-word;
}

    /* Remove these color classes if they exist */
    .output-area .text-success,
    .output-area .text-danger,
    .output-area .text-warning {
        color: inherit;
    }

    .output-area pre {
        margin: 0;
        padding: 0;
    }

    .question-description {
        white-space: pre-wrap;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        font-size: 0.7rem;
        line-height: 1.5;
        background: none;
        border: none;
        margin: 0;
        padding: 0;
    }

    /* Remove card margins and add borders */
    .card {
        margin: 0;
        border-radius: 0;
    }

    .card-header {
        padding: 0.5rem 1rem;
        border-radius: 0;
    }

    /* Make sections equal height */
    .row {
        height: calc(100vh - 100px);
    }

    .gap-2 {
        gap: 0.5rem;
    }

    .btn:disabled {
        cursor: not-allowed;
        opacity: 0.65;
    }

    .spinner-border-sm {
        width: 1rem;
        height: 1rem;
        margin-right: 0.5rem;
    }

    .time-info {
        padding: 0.5rem 1rem;
        background-color: #f8f9fa;
        border-radius: 0.375rem;
        margin-top: 0.5rem;
    }

    .time-elapsed {
        font-weight: 500;
        color: #333;
    }

    .squiggly-error {
        background: url("data:image/svg+xml,%3Csvg%20xmlns%3D'http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg'%20viewBox%3D'0%200%206%203'%20enable-background%3D'new%200%200%206%203'%20height%3D'3'%20width%3D'6'%3E%3Cg%20fill%3D'%23ff0000'%3E%3Cpolygon%20points%3D'5.5%2C0%202.5%2C3%201.1%2C3%204.1%2C0'%2F%3E%3Cpolygon%20points%3D'4%2C0%206%2C2%206%2C0.6%205.4%2C0'%2F%3E%3Cpolygon%20points%3D'0%2C2%201%2C3%202.4%2C3%200%2C0.6'%2F%3E%3C%2Fg%3E%3C%2Fsvg%3E") repeat-x bottom 3px left 0;
    }
</style>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.36.1/min/vs/loader.min.js"></script>
    <script>
        require.config({ paths: { 'vs': 'https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.36.1/min/vs' }});
        require(['vs/editor/editor.main'], function() {
            // Add this line to declare the decorations variable
            let decorations = [];
            
            var editor = monaco.editor.create(document.getElementById('editor'), {
                value: @Json.Serialize(Model.CurrentQuestion?.InitialCode ?? "// Write your code here"),
                language: 'csharp',
                theme: 'vs-dark',
                automaticLayout: true,
                fontSize: 10,
                lineHeight: 18,
                minimap: {
                    enabled: false
                }
            });

            // Update hidden textarea before form submission
            document.querySelector('form').addEventListener('submit', function() {
                document.querySelector('textarea[name="SubmittedCode"]').value = editor.getValue();
            });

            const form = document.getElementById('codeForm');
            const submitBtn = document.getElementById('submitBtn');
            const confirmSubmitBtn = document.getElementById('confirmSubmit');
            const modal = new bootstrap.Modal(document.getElementById('confirmSubmitModal'));

            submitBtn.addEventListener('click', function() {
                document.querySelector('textarea[name="SubmittedCode"]').value = editor.getValue();
                modal.show();
            });

            async function getUserIp() {
        try {
            const response = await fetch('https://ipinfo.io/json?token=8841c2af2bcc80');
            const data = await response.json();
            //console.log("üåê IP Info fetched:", data.ip);
            return data.ip;
        } catch (error) {
            console.error('Failed to get IP:', error);
            return 'unknown';
        }
    }
            confirmSubmitBtn.addEventListener('click', async function() {
                modal.hide();
                const formData = new FormData(form);
                const studentId = formData.get('StudentId');
                const group = formData.get('Group');
                const question = formData.get('Question');
                const code = formData.get('SubmittedCode');
                const userIp = await getUserIp();

                try {
                    const response = await fetch('/api/Questions/submit', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            studentId: studentId,
                            groupId: parseInt(group),
                            questionIndex: parseInt(question),
                            code: code,
                            ipAddress: userIp
                        })
                    });

                    if (response.ok) {
                        const result = await response.json();
                        if (result.isCompleted) {
                            // If completed, redirect to completion page
                            window.location.href = `/Completion?studentId=${studentId}&groupId=${result.nextGroup}&done=true`;
                        } else {
                            // Otherwise, continue to next question
                            window.location.href = `/Dashboard?group=${result.nextGroup}&question=${result.nextQuestion}&studentId=${studentId}`;
                        }
                    } else {
                        const error = await response.json();
                        document.getElementById('output').textContent = `Error: ${error.message || 'Failed to submit code'}`;
                    }
                } catch (error) {
                    document.getElementById('output').textContent = `Error: ${error.message}`;
                }
            });

            // Update the run code functionality
            const runButton = document.getElementById('runCode');
            runButton.addEventListener('click', async function() {
                const outputElement = document.getElementById('output');
                
                // Disable button and show running state
                runButton.disabled = true;
                runButton.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Running...';
                outputElement.textContent = 'Running...';
                
                // Clear previous decorations
                decorations = editor.deltaDecorations(decorations, []);
                
                try {
                    const response = await fetch('/api/CodeExecution/execute', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ 
                            code: editor.getValue() 
                        })
                    });


                    const result = await response.json();
                    
                    
                    if (response.ok && result.Output) {
                        // Simple plain text output without coloring
                        outputElement.innerHTML = `<pre>${result.Output}</pre>`;
                    } else if (result.errors && result.errors.length > 0) {
                        // Keep error handling as is
                        const markers = result.errors.map(err => ({
                            startLineNumber: err.line || 1,
                            startColumn: err.column || 1,
                            endLineNumber: err.line || 1,
                            endColumn: (err.column || 1) + 1,
                            message: err.message || 'Unknown error',
                            severity: monaco.MarkerSeverity.Error
                        }));

                        // Set markers on the model
                        monaco.editor.setModelMarkers(
                            editor.getModel(), 
                            'compilation',
                            markers
                        );

                        // Show errors in output
                        outputElement.innerHTML = result.errors
                            .map(err => `Error (${err.line}:${err.column}): ${err.message}`)
                            .join('\n');
                    } else if (result.error) {
                        // Handle runtime errors with formatting
                        outputElement.innerHTML = `<span class="text-danger">Runtime Error: ${result.error.type}\n${result.error.message}\nLine: ${result.error.line}</span>`;
                    } else {
                        // Handle unexpected response
                        outputElement.innerHTML = '<span class="text-warning">No output received from code execution</span>';
                    }
                } catch (error) {
                    // Handle execution errors
                    outputElement.innerHTML = `<span class="text-danger">Error: ${error.message}</span>`;
                } finally {
                    // Re-enable button and restore original text
                    runButton.disabled = false;
                    runButton.textContent = 'Run Code';
                }
            });

            let lastSavedContent = '';

            async function autoSave() {
                const editor = monaco.editor.getEditors()[0];
                const currentContent = editor.getValue();
                
                if (currentContent && currentContent !== lastSavedContent) {
                    const studentId = document.querySelector('input[name="StudentId"]').value;
                    const group = document.querySelector('input[name="Group"]').value;
                    const question = document.querySelector('input[name="Question"]').value;
                    const userIp = await getUserIp();

                    fetch(`/api/Questions/autosave/${studentId}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            groupId: parseInt(group),
                            questionIndex: parseInt(question),
                            code: currentContent,
                            ipAddress: userIp
                        })
                    })
                    .then(response => response.json())
                    .then(result => {
                        if (result.success) {
                            lastSavedContent = currentContent;
                            console.log('Auto-saved at:', new Date().toLocaleTimeString(), 'from IP:', userIp);
                        }
                    })
                    .catch(error => console.error('Auto-save failed:', error));
                }
            }

            // Start auto-save interval when editor is loaded
            setInterval(autoSave, 60000); // Run every 60 seconds

            // Also save when user switches away from the window
            window.addEventListener('blur', autoSave);

            // Initialize timer variables
const TOTAL_TIME = 60 * 60; // 60 minutes in seconds * 60
const startTime = new Date(@Json.Serialize(Model.StartTime));
const initialElapsed = @Json.Serialize(Model.TimeElapsed * 60); // Convert minutes to seconds
let remainingSeconds = TOTAL_TIME - Math.round(initialElapsed);
const timeDisplay = document.getElementById('timeDisplay');

// Format time function
function formatTime(seconds) {
    const minutes = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `Time Left: ${minutes}:${secs.toString().padStart(2, '0')}`;
}

// Update timer every second
const timer = setInterval(async () => {
    if (remainingSeconds > 0) {
        remainingSeconds--;
        if (timeDisplay) {
            timeDisplay.textContent = formatTime(remainingSeconds);
            if (remainingSeconds < 300) {
                timeDisplay.style.color = '#dc3545';
                timeDisplay.style.fontWeight = 'bold';
            }
        }
    } else {
        clearInterval(timer);
        if (timeDisplay) {
            timeDisplay.textContent = 'Time Up!';
            timeDisplay.style.color = '#dc3545';
            
            const studentId = document.querySelector('input[name="StudentId"]').value;
            const group = document.querySelector('input[name="Group"]').value;
            const userIp = await getUserIp();
            
            try {
                await fetch('/api/Questions/submit', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        studentId: studentId,
                        groupId: parseInt(group),
                        questionIndex: parseInt(question),
                        code: editor.getValue(),
                        ipAddress: userIp
                    })
                });
            } finally {
                window.location.href = `/Completion?studentId=${studentId}&groupId=${group}&done=true`;
            }
        }
    }
}, 1000);

// Clean up timer when leaving the page
window.addEventListener('beforeunload', () => {
    clearInterval(timer);
});
        });
    </script>
}
